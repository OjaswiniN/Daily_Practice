class Solution {
    public int[][] merge(int[][] intervals) {

        if(intervals.length <= 1){
            return intervals;
        }

        Arrays.sort(intervals , (arr1 , arr2) -> Integer.compare(arr1[0] , arr2[0]));

        List<int[]> output_arr = new ArrayList<>();
        int[] current_interval = intervals[0];
        output_arr.add(current_interval);

        for(int [] interval : intervals){
            int current_begin = current_interval[0];
            int current_end = current_interval[1];
            int next_begin = interval[0];
            int next_end = interval[1];

            if(current_end >= next_begin){
                current_interval[1] = Math.max(current_end , next_end);

            }else{
                current_interval = interval;
                output_arr.add(current_interval);
            }
        }

        return output_arr.toArray(new int[output_arr.size()][]);    


    /*
     [1,3] [2,6] [8,10] [15,18]

        check for length if the length is less than 1 return the array 

        Sort the array 
        Arrays.sort(interval,(arr1,arr2) -> Integer.compare(arr[0],arr[1]))

        take a arraylist 
        List<int[]> output_arr = new ArrayList();

       fist aray as a 
       int current_interval = interval[0];  
       output_arr.add(current_interval);   
    
        for(int [] interval : intervals){
            int current_begin = current_interval[0];
            int current_end = current_interval[1];
            int next_begin = intevals[0];
            int next_end = intervals[1];
            

            if(current_end  >= next_begin){
                current_interval[1] = Math.max(current_end , next_end);

            }else{
                current_interval = intercal;
                output_arr.add(current_interval)
            }
        }



    return output_array.toArray(new int[output_array.size()][]);
    */
    }
}
